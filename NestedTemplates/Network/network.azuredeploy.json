{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vnetNames": {
            "type": "array"
        },
        "subnetNames": {
            "type": "array"
        },
        "peeringList": {
            "type": "array"
        },
        "securityPeeringList": {
            "type": "array"
        }
    },
    "variables": {
        "defaultSecurityRules": [
            {
                "name": "10_net",
                "properties": {
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "destinationPortRange": "*",
                    "sourceAddressPrefix": "*",
                    "destinationAddressPrefix": "10.0.0.0/8",
                    "access": "Allow",
                    "priority": 100,
                    "direction": "Outbound",
                    "sourcePortRanges": [],
                    "destinationPortRanges": [],
                    "sourceAddressPrefixes": [],
                    "destinationAddressPrefixes": []
                }
            },
            {
                "name": "172_net",
                "properties": {
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "destinationPortRange": "*",
                    "sourceAddressPrefix": "*",
                    "destinationAddressPrefix": "172.16.0.0/20",
                    "access": "Allow",
                    "priority": 110,
                    "direction": "Outbound",
                    "sourcePortRanges": [],
                    "destinationPortRanges": [],
                    "sourceAddressPrefixes": [],
                    "destinationAddressPrefixes": []
                }
            },
            {
                "name": "192_net",
                "properties": {
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "destinationPortRange": "*",
                    "sourceAddressPrefix": "*",
                    "destinationAddressPrefix": "192.168.0.0/24",
                    "access": "Allow",
                    "priority": 120,
                    "direction": "Outbound",
                    "sourcePortRanges": [],
                    "destinationPortRanges": [],
                    "sourceAddressPrefixes": [],
                    "destinationAddressPrefixes": []
                }
            },
            {
                "name": "AzureCloud_Services",
                "properties": {
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "destinationPortRange": "8080",
                    "sourceAddressPrefix": "*",
                    "destinationAddressPrefix": "AzureCloud",
                    "access": "Allow",
                    "priority": 130,
                    "direction": "Outbound",
                    "sourcePortRanges": [],
                    "destinationPortRanges": [],
                    "sourceAddressPrefixes": [],
                    "destinationAddressPrefixes": []
                }
            },
            {
                "name": "Deny_All",
                "properties": {
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "destinationPortRange": "*",
                    "sourceAddressPrefix": "*",
                    "destinationAddressPrefix": "*",
                    "access": "Deny",
                    "priority": 1000,
                    "direction": "Outbound",
                    "sourcePortRanges": [],
                    "destinationPortRanges": [],
                    "sourceAddressPrefixes": [],
                    "destinationAddressPrefixes": []
                }
            }
        ],
        "storageAccountNameList": {
            "copy": [
                {
                    "name": "saNames",
                    "count": "[length(parameters('vnetNames'))]",
                    "input": {
                        "saNamesString": "[substring(toLower(concat('azg', parameters('vnetNames')[copyIndex('saNames')].region, parameters('vnetNames')[copyIndex('saNames')].networkName, uniqueString(resourceGroup().id))),0, 23)]",
                        "location": "[parameters('vnetNames')[copyIndex('saNames')].locationName]"
                    }
                }
            ]
        },
        "subnetNamesList": {
            "copy": [
                {
                    "name": "subnetNames",
                    "count": "[length(parameters('subnetNames'))]",
                    "input": {
                        "subnetName": "[parameters('subnetNames')[copyIndex('subnetNames')].name]",
                        "subnetCIDR": "[parameters('subnetNames')[copyIndex('subnetNames')].networkCIDR]"
                    }
                }
            ]
        },
        "vnetNameList": {
            "copy": [
                {
                    "name": "vnetNames",
                    "count": "[length(parameters('vnetNames'))]",
                    "input": {
                        "vnetRegion": "[parameters('vnetNames')[copyIndex('vnetNames')].region]",
                        "vnetLocation": "[parameters('vnetNames')[copyIndex('vnetNames')].locationName]",
                        "vnetNetworkName": "[parameters('vnetNames')[copyIndex('vnetNames')].networkName]",
                        "vnetNumber": "[parameters('vnetNames')[copyIndex('vnetNames')].vnetNumber]",
                        "vnetNetworkOctet": "[parameters('vnetNames')[copyIndex('vnetNames')].ventNetworkOctet]",
                        "vnetNetwork": "[parameters('vnetNames')[copyIndex('vnetNames')].network]",
                        "vnetName": "[concat('AZG-', parameters('vnetNames')[copyIndex('vnetNames')].region, '-', parameters('vnetNames')[copyIndex('vnetNames')].networkName, '-Vnet', parameters('vnetNames')[copyIndex('vnetNames')].vnetNumber)]",
                        "vnetPrefix": "[concat('AZG-', parameters('vnetNames')[copyIndex('vnetNames')].region, '-', parameters('vnetNames')[copyIndex('vnetNames')].networkName)]"
                    }
                }
            ]
        },
        "vnetPeerList": {
            "copy": [
                {
                    "name": "vnetPeers",
                    "count": "[length(parameters('peeringlist'))]",
                    "input": {
                        "vnetPeerName": "[parameters('peeringlist')[copyIndex('vnetPeers')].destinationPeeringName]",
                        "vnetPeerSubscriptionID": "[parameters('peeringlist')[copyIndex('vnetPeers')].destinationSubscriptionID]",
                        "vnetPeerResourceGroup": "[parameters('peeringlist')[copyIndex('vnetPeers')].destinationResourceGroup]"
                    }
                }
            ]
        },
        "securityVnetPeerList": {
            "copy": [
                {
                    "name": "securityVnetPeers",
                    "count": "[length(parameters('securityPeeringList'))]",
                    "input": {
                        "vnetPeerName": "[parameters('securityPeeringList')[copyIndex('securityVnetPeers')].destinationPeeringName]",
                        "vnetPeerSubscriptionID": "[parameters('securityPeeringList')[copyIndex('securityVnetPeers')].destinationSubscriptionID]",
                        "vnetPeerResourceGroup": "[parameters('securityPeeringList')[copyIndex('securityVnetPeers')].destinationResourceGroup]"
                    }
                }
            ]
        },
        "NSGLogAnalyticsName": "[replace(concat(subscription().displayName, '-NSG-LA'),' ', '-')]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-04-01",
            "name": "[variables('storageAccountNameList').saNames[copyIndex()].saNamesString]",
            "location": "[variables('storageAccountNameList').saNames[copyIndex()].location]",
            "comments": "Diagnostics storage account for NSG Flow Logs in each region where a VNet will be deployed.",
            "copy": {
                "name": "storageCopy",
                "count":"[length(parameters('vnetNames'))]"
            },
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "enabled": true
                        },
                        "blob": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Cool"
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2015-11-01-preview",
            "name": "[variables('NSGLogAnalyticsName')]",
            "comments": "Log Analytics workspace for NSG Flow Logs. Currently this functionality is only avaialable in the 'usgovvirginia' region. 9/16/19",
            "location": "eastus",
            "properties": {
                "source": "Azure",
                "sku": {
                    "name": "Free"
                },
                "retentionInDays": 7
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-04-01",
            "name": "[concat(variables('subnetNamesList').subnetNames[copyIndex()].subnetName, '-NSG')]",
            "comments": "Creation of custom network security group for each VNet. Additionally this takes into account any custom rules defined in the parameters file.",
            "location": "[variables('vnetNameList').vnetNames[copyIndex()].vnetLocation]",
            "tags": {
                "displayName": "[concat(variables('subnetNamesList').subnetNames[copyIndex()].subnetName, '-NSG')]"
            },
            "copy":{
                "name": "subnets",
                "count": "[length(parameters('subnetNames'))]"
            },
            "properties": {
                "securityRules": "[variables('defaultSecurityRules')]"
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-04-01",
            "name": "[variables('vnetNameList').vnetNames[copyIndex()].vnetName]",
            "comments": "Creation of VNets and appropriate subnets in each region, and the assignment of appropriate network security group.",
            "location": "[variables('vnetNameList').vnetNames[copyIndex()].vnetLocation]",
            "tags": {
                "displayName": "[variables('vnetNameList').vnetNames[copyIndex()].vnetName]"
            },
            "copy":{
                "name": "vnetNames",
                "count": "[length(parameters('vnetNames'))]"
            },
            "dependsOn": [
                "[concat(variables('subnetNamesList').subnetNames[copyIndex()].subnetName, '-NSG-', variables('vnetNameList').vnetNames[copyIndex()].vnetRegion)]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vnetNameList').vnetNames[copyIndex()].vnetNetwork]"
                    ]
                },
                "copy": [
                    {
                        "name": "subnets",
                        "count": "[length(parameters('subnetNames'))]",
                        "input": {
                            "name": "[concat(variables('subnetNamesList').subnetNames[copyIndex('subnets')].subnetName, '-SN')]",
                            "properties": {
                                "addressPrefix": "[concat('10.',variables('vnetNameList').vnetNames[copyIndex()].vnetNetworkOctet, '.32.', variables('subnetNamesList').subnetNames[copyIndex('subnets')].subnetCIDR)]",
                                "networkSecurityGroup": {
                                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('subnetNamesList').subnetNames[copyIndex()].subnetName, '-NSG'))]"
                                },
                                "serviceEndpoints": [
                                    {
                                        "service": "Microsoft.Storage",
                                        "locations": [
                                            "westus",
                                            "eastus"
                                        ]
                                    },
                                    {
                                        "service": "Microsoft.KeyVault",
                                        "locations": [
                                            "westus",
                                            "eastus"
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2019-04-01",
            "name": "[concat(variables('vnetNameList').vnetNames[copyIndex()].vnetName, '/ProdDMZ')]",
            "location": "[resourceGroup().location]",
            "comments": "Initiate network pereing to the ProdDMZ netowrk. To complete the peer a separate deployment will need to be setup on in the ProdDMZ subcription.",
            "copy":{
                "name": "vnetNames",
                "count": "[length(parameters('vnetNames'))]"
            },
            "dependsOn": [
                "[variables('vnetNameList').vnetNames[copyIndex()].vnetName]"
            ],
            "properties": {
                "peeringState": "Initiated",
                "remoteVirtualNetwork": {
                    "id": "[resourceID(variables('vnetPeerList').vnetPeers[copyIndex()].vnetPeerSubscriptionID,variables('vnetPeerList').vnetPeers[copyIndex()].vnetPeerResourceGroup, 'Microsoft.Network/virtualNetworks', variables('vnetPeerList').vnetPeers[copyIndex()].vnetPeerName)]"
                },
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": true,
                "useRemoteGateways": false
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2019-04-01",
            "name": "[concat(variables('vnetNameList').vnetNames[copyIndex()].vnetName, '/Security')]",
            "location": "[resourceGroup().location]",
            "comments": "Initiate network pereing to the SECURITY network. To complete the peer a separate deployment will need to be setup on in the Security subcription.",
            "copy":{
                "name": "vnetNames",
                "count": "[length(parameters('vnetNames'))]"
            },
            "dependsOn": [
                "[variables('vnetNameList').vnetNames[copyIndex()].vnetName]"
            ],
            "properties": {
                "peeringState": "Initiated",
                "remoteVirtualNetwork": {
                    "id": "[resourceID(variables('securityVnetPeerList').securityVnetPeers[copyIndex()].vnetPeerSubscriptionID, variables('securityVnetPeerList').securityVnetPeers[copyIndex()].vnetPeerResourceGroup, 'Microsoft.Network/virtualNetworks', variables('securityVnetPeerList').securityVnetPeers[copyIndex()].vnetPeerName)]"
                },
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": true,
                "useRemoteGateways": false
            }
        }
    ],
    "outputs": {
    }
}